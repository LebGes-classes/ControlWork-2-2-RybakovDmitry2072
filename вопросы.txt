1.Сериализация и десериализация - это процессы преобразования 
объектов в поток байтов 
(сериализация) и обратно (десериализация).
Эти процессы позволяют сохранять состояние объектов или передавать их по сети.

2.Последовательность работы с потоком включает в себя несколько этапов:

Создание потока: В этом этапе создается объект потока. Для чтения данных из источника создается поток ввода (input stream), а для записи данных в назначение - поток вывода (output stream).
Открытие потока: После создания потока его необходимо открыть. Для этого используется метод, который связывает поток с определенным источником данных или назначением. Например, для чтения данных из файла это может быть открытие файла для чтения, а для записи данных в файл - открытие файла для записи.
Чтение/запись данных: После открытия потока можно начать чтение данных из источника или запись данных в назначение. Для чтения данных обычно используется метод чтения из потока (например, read()), а для записи данных - метод записи в поток (например, write()).
Обработка данных: Прочитанные данные обычно обрабатываются или передаются для дальнейшей обработки. То же самое относится и к данным, которые предназначены для записи.
Закрытие потока: По завершении работы с потоком его необходимо закрыть, чтобы освободить ресурсы и завершить операции ввода-вывода. Закрытие потока обычно выполняется с помощью метода close().

3.Потоки байтов (Byte Streams):
InputStream - абстрактный класс, представляющий поток байтов для чтения данных.
OutputStream - абстрактный класс, представляющий поток байтов для записи данных.

Потоки символов (Character Streams):

Reader - абстрактный класс, представляющий поток символов для чтения текстовых данных.
Writer - абстрактный класс, представляющий поток символов для записи текстовых данных.

Потоки объектов (Object Streams):

ObjectInputStream - поток для чтения объектов из потока байтов.
ObjectOutputStream - поток для записи объектов в поток байтов.

Буферизованные потоки (Buffered Streams):

BufferedInputStream - предоставляет буферизацию для потока ввода.
BufferedOutputStream - предоставляет буферизацию для потока вывода.
BufferedReader - предоставляет буферизацию для потока символов ввода.
BufferedWriter - предоставляет буферизацию для потока символов вывода.

Потоки для работы с файлами (File Streams):

FileInputStream - поток для чтения данных из файла.
FileOutputStream - поток для записи данных в файл.

4.Основное отличие между двумя подходами к организации ввода/вывода в том, что Java IO является потокоориентированным, а Java NIO – буфер-ориентированным.

IO: Все операции ввода-вывода блокируют поток выполнения до завершения операции. Если данные готовы для чтения, но поток не готов принять их, чтение будет заблокировано, пока данные не будут доступны.
NIO: NIO поддерживает неблокирующий ввод-вывод. Это означает, что поток не блокируется, пока данные не будут доступны для чтения или записи. Вместо этого поток может продолжать выполнять другие задачи и периодически проверять готовность данных.

Буферизация:
IO: IO обычно использует потоки (streams) без буферизации, хотя вы можете добавить буферизацию, используя классы BufferedInputStream и BufferedOutputStream.
NIO: NIO всегда использует буферы для чтения и записи данных. Это позволяет более эффективно работать с данными, особенно при чтении и записи больших объемов информации.
